{"ast":null,"code":"var _AuthService;\nimport { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.api = environment.apiBaseUrl + '/api/user';\n    this.userSubject = new BehaviorSubject(this.getUserFromStorage());\n    this.user$ = this.userSubject.asObservable();\n  }\n  login(data) {\n    return this.http.post(`${this.api}/login`, data).pipe(tap(res => {\n      localStorage.setItem('auth', JSON.stringify(res));\n      this.userSubject.next(res);\n    }));\n  }\n  register(data) {\n    return this.http.post(`${this.api}/register`, data);\n  }\n  forgotPassword(email) {\n    return this.http.post(`${this.api}/forgot-password`, {\n      email\n    });\n  }\n  logout() {\n    localStorage.removeItem('auth');\n    this.userSubject.next(null);\n  }\n  getUserFromStorage() {\n    const data = localStorage.getItem('auth');\n    return data ? JSON.parse(data) : null;\n  }\n  get isLoggedIn() {\n    return !!this.userSubject.value;\n  }\n}\n_AuthService = AuthService;\n_AuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || _AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\n_AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _AuthService,\n  factory: _AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["BehaviorSubject","tap","environment","AuthService","constructor","http","api","apiBaseUrl","userSubject","getUserFromStorage","user$","asObservable","login","data","post","pipe","res","localStorage","setItem","JSON","stringify","next","register","forgotPassword","email","logout","removeItem","getItem","parse","isLoggedIn","value","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\vishnu.reddy\\works\\iplfranchis\\IPLFranchises\\FranchisClient\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { environment } from '../../../environments/environment';\r\n\r\nexport interface LoginRequest {\r\n  username: string;\r\n  password: string;\r\n}\r\n\r\nexport interface RegisterRequest {\r\n  username: string;\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface AuthResponse {\r\n  accessToken: string;\r\n  refreshToken: string;\r\n  username: string;\r\n  email: string;\r\n  userId: string;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthService {\r\n  private api = environment.apiBaseUrl + '/api/user';\r\n  private userSubject = new BehaviorSubject<AuthResponse | null>(this.getUserFromStorage());\r\n  user$ = this.userSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  login(data: LoginRequest): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(`${this.api}/login`, data).pipe(\r\n      tap(res => {\r\n        localStorage.setItem('auth', JSON.stringify(res));\r\n        this.userSubject.next(res);\r\n      })\r\n    );\r\n  }\r\n\r\n  register(data: RegisterRequest): Observable<any> {\r\n    return this.http.post<any>(`${this.api}/register`, data);\r\n  }\r\n\r\n  forgotPassword(email: string): Observable<any> {\r\n    return this.http.post(`${this.api}/forgot-password`, { email });\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem('auth');\r\n    this.userSubject.next(null);\r\n  }\r\n\r\n  getUserFromStorage(): AuthResponse | null {\r\n    const data = localStorage.getItem('auth');\r\n    return data ? JSON.parse(data) : null;\r\n  }\r\n\r\n  get isLoggedIn(): boolean {\r\n    return !!this.userSubject.value;\r\n  }\r\n}\r\n"],"mappings":";AAEA,SAAqBA,eAAe,QAAQ,MAAM;AAClD,SAASC,GAAG,QAAQ,gBAAgB;AACpC,SAASC,WAAW,QAAQ,mCAAmC;;;AAsB/D,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJhB,KAAAC,GAAG,GAAGJ,WAAW,CAACK,UAAU,GAAG,WAAW;IAC1C,KAAAC,WAAW,GAAG,IAAIR,eAAe,CAAsB,IAAI,CAACS,kBAAkB,EAAE,CAAC;IACzF,KAAAC,KAAK,GAAG,IAAI,CAACF,WAAW,CAACG,YAAY,EAAE;EAEA;EAEvCC,KAAKA,CAACC,IAAkB;IACtB,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAe,GAAG,IAAI,CAACR,GAAG,QAAQ,EAAEO,IAAI,CAAC,CAACE,IAAI,CACjEd,GAAG,CAACe,GAAG,IAAG;MACRC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACJ,GAAG,CAAC,CAAC;MACjD,IAAI,CAACR,WAAW,CAACa,IAAI,CAACL,GAAG,CAAC;IAC5B,CAAC,CAAC,CACH;EACH;EAEAM,QAAQA,CAACT,IAAqB;IAC5B,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAM,GAAG,IAAI,CAACR,GAAG,WAAW,EAAEO,IAAI,CAAC;EAC1D;EAEAU,cAAcA,CAACC,KAAa;IAC1B,OAAO,IAAI,CAACnB,IAAI,CAACS,IAAI,CAAC,GAAG,IAAI,CAACR,GAAG,kBAAkB,EAAE;MAAEkB;IAAK,CAAE,CAAC;EACjE;EAEAC,MAAMA,CAAA;IACJR,YAAY,CAACS,UAAU,CAAC,MAAM,CAAC;IAC/B,IAAI,CAAClB,WAAW,CAACa,IAAI,CAAC,IAAI,CAAC;EAC7B;EAEAZ,kBAAkBA,CAAA;IAChB,MAAMI,IAAI,GAAGI,YAAY,CAACU,OAAO,CAAC,MAAM,CAAC;IACzC,OAAOd,IAAI,GAAGM,IAAI,CAACS,KAAK,CAACf,IAAI,CAAC,GAAG,IAAI;EACvC;EAEA,IAAIgB,UAAUA,CAAA;IACZ,OAAO,CAAC,CAAC,IAAI,CAACrB,WAAW,CAACsB,KAAK;EACjC;;eApCW3B,WAAW;;mBAAXA,YAAW,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAX/B,YAAW;EAAAgC,OAAA,EAAXhC,YAAW,CAAAiC,IAAA;EAAAC,UAAA,EADE;AAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}