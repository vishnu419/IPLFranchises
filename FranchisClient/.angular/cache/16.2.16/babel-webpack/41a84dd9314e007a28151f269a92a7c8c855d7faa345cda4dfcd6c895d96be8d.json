{"ast":null,"code":"export const AuthInterceptor = (req, next) => {\n  const authData = localStorage.getItem('auth');\n  let token = null;\n  if (authData) {\n    try {\n      token = JSON.parse(authData).accessToken;\n    } catch {}\n  }\n  if (token) {\n    const cloned = req.clone({\n      setHeaders: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return next(cloned);\n  }\n  return next(req);\n};","map":{"version":3,"names":["AuthInterceptor","req","next","authData","localStorage","getItem","token","JSON","parse","accessToken","cloned","clone","setHeaders","Authorization"],"sources":["C:\\Users\\vishnu.reddy\\works\\iplfranchis\\IPLFranchises\\FranchisClient\\src\\app\\core\\services\\auth.interceptor.ts"],"sourcesContent":["import { HttpEvent, HttpHandlerFn, HttpInterceptorFn, HttpRequest } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport const AuthInterceptor: HttpInterceptorFn = (req: HttpRequest<any>, next: HttpHandlerFn): Observable<HttpEvent<any>> => {\r\n  const authData = localStorage.getItem('auth');\r\n  let token: string | null = null;\r\n  if (authData) {\r\n    try {\r\n      token = JSON.parse(authData).accessToken;\r\n    } catch {}\r\n  }\r\n  if (token) {\r\n    const cloned = req.clone({\r\n      setHeaders: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n    return next(cloned);\r\n  }\r\n  return next(req);\r\n};\r\n"],"mappings":"AAGA,OAAO,MAAMA,eAAe,GAAsBA,CAACC,GAAqB,EAAEC,IAAmB,KAAgC;EAC3H,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;EAC7C,IAAIC,KAAK,GAAkB,IAAI;EAC/B,IAAIH,QAAQ,EAAE;IACZ,IAAI;MACFG,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACL,QAAQ,CAAC,CAACM,WAAW;KACzC,CAAC,MAAM;;EAEV,IAAIH,KAAK,EAAE;IACT,MAAMI,MAAM,GAAGT,GAAG,CAACU,KAAK,CAAC;MACvBC,UAAU,EAAE;QACVC,aAAa,EAAE,UAAUP,KAAK;;KAEjC,CAAC;IACF,OAAOJ,IAAI,CAACQ,MAAM,CAAC;;EAErB,OAAOR,IAAI,CAACD,GAAG,CAAC;AAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}